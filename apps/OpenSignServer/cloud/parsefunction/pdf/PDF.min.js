import SignPDF from './SignPDF.min.cjs';
import fs from 'node:fs';
import axios from 'axios';
import { plainAddPlaceholder } from 'node-signpdf/dist/helpers/index.js';
const serverUrl = process.env.SERVER_URL,
  APPID = process.env.APP_ID,
  masterKEY = process.env.MASTER_KEY;
async function uploadFile(e, a) {
  try {
    var t = fs.readFileSync(a),
      s = new Parse.File(e, [...t]),
      r = (await s.save({ useMasterKey: !0 }), s.url());
    return { imageUrl: r };
  } catch (e) {
    console.log('Err ', e), fs.unlinkSync(a);
  }
}
async function updateDoc(t, s, r, i, o, n) {
  try {
    var d = {
      UserPtr: { __type: 'Pointer', className: n, objectId: r },
      SignedUrl: s,
      Activity: 'Signed',
      ipAddress: i,
    };
    let e;
    var l = (e = o.AuditTrail && 0 < o.AuditTrail.length ? [...o.AuditTrail, d] : [d]).filter(
      e => 'Signed' === e.Activity
    );
    let a = !1;
    !((o.Signers && 0 < o.Signers.length && l.length !== o.Signers.length) || !(a = !0));
    var c = { SignedUrl: s, AuditTrail: e, IsCompleted: a };
    await axios.put(serverUrl + '/classes/contracts_Document/' + t, c, {
      headers: {
        'Content-Type': 'application/json',
        'X-Parse-Application-Id': APPID,
        'X-Parse-Master-Key': masterKEY,
      },
    });
    return { isCompleted: a, message: 'success' };
  } catch (e) {
    return console.log('update doc err ', e), 'err';
  }
}
async function sendMail(e) {
  var a = e.url,
    t = e.sender,
    s = e.pdfName,
    a = {
      url: a,
      from: 'OpenSign™',
      recipient: e.receiver,
      subject: 'You have signed the doc - ' + s,
      pdfName: s,
      html:
        "<html><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8' /></head><body>  <div style='background-color:#f5f5f5;padding:20px'>    <div style='box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;background-color:white;'> <div><img src=https://qikinnovation.ams3.digitaloceanspaces.com/logo.png  height='50' style='padding:20px'/> </div><div style='padding:2px;font-family:system-ui; background-color: #47a3ad;'>    <p style='font-size:20px;font-weight:400;color:white;padding-left:20px',>  Document Copy</p></div><div><p style='padding:20px;font-family:system-ui;font-size:14px'>A copy of the document " +
        s +
        ' Standard is attached to this email. Kindly download the document from the attachment.</p></div> </div><div><p>This is an automated email from Open Sign. For any queries regarding this email, please contact the sender ' +
        t.Mail +
        ' directly. If you think this email is inappropriate or spam, you may file a complaint with Open Sign <a href=www.opensignlabs.com target=_blank>here</a>.</p></div></div></body></html>',
    };
  await axios.post(serverUrl + '/functions/sendmailv3', a, {
    headers: {
      'Content-Type': 'application/json',
      'X-Parse-Application-Id': APPID,
      'X-Parse-Master-Key': masterKEY,
    },
  });
}
async function sendCompletedMail(e) {
  var a = e.url,
    t = e.sender,
    s = e.pdfName,
    a = {
      url: a,
      from: 'OpenSign™',
      recipient: e.receiver,
      subject: `Document ${s} has been signed by all parties`,
      pdfName: s,
      html:
        "<html><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8' /></head><body>  <div style='background-color:#f5f5f5;padding:20px'>    <div style='box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;background-color:white;'> <div><img src=https://qikinnovation.ams3.digitaloceanspaces.com/logo.png  height='50' style='padding:20px'/> </div><div style='padding:2px;font-family:system-ui; background-color: #47a3ad;'>    <p style='font-size:20px;font-weight:400;color:white;padding-left:20px',> Document sign successfully</p></div><div><p style='padding:20px;font-family:system-ui;font-size:14px'>All parties have successfully signed the document" +
        s +
        '. Kindly download the document from the attachment.</p></div> </div><div><p>This is an automated email from Open Sign. For any queries regarding this email, please contact the sender ' +
        t.Mail +
        ' directly. If you think this email is inappropriate or spam, you may file a complaint with Open Sign <a href=www.opensignlabs.com target=_blank>here</a>.</p></div></div></body></html>',
    };
  await axios.post(serverUrl + '/functions/sendmailv3', a, {
    headers: {
      'Content-Type': 'application/json',
      'X-Parse-Application-Id': APPID,
      'X-Parse-Master-Key': masterKEY,
    },
  });
}
async function sendDoctoWebhook(t, e) {
  t.data.ExtUserPtr?.Webhook &&
    ((e = {
      File: e || '',
      Name: t?.data?.Name,
      Note: t?.data?.Note || '',
      Description: t?.data?.Description || '',
      Signers: t?.data?.Signers?.map(e => ({ Name: e.Name, Email: e.Email, Phone: e.Phone })) || [
        {
          Name: t?.data?.ExtUserPtr?.Name,
          Email: t?.data?.ExtUserPtr?.Email,
          Phone: t?.data?.ExtUserPtr?.Phone,
        },
      ],
      Event: 'Completed',
      CompletedAt: new Date(),
      CreatedAt: t?.data?.createdAt,
    }),
    await axios
      .post(t?.data?.ExtUserPtr?.Webhook, e, { headers: { 'Content-Type': 'application/json' } })
      .then(e => {
        try {
          var a = new Parse.Object('contracts_Webhook');
          a.set('Log', e?.status),
            a.set('UserId', {
              __type: 'Pointer',
              className: '_User',
              objectId: t.data.ExtUserPtr.UserId.objectId,
            }),
            a.save(null, { useMasterKey: !0 });
        } catch (e) {
          console.log('err save in contracts_Webhook', e);
        }
      })
      .catch(e => {
        console.log('Err send data to webhook', e);
        try {
          var a = new Parse.Object('contracts_Webhook');
          a.set('Log', e?.status),
            a.set('UserId', {
              __type: 'Pointer',
              className: '_User',
              objectId: t.data.ExtUserPtr.UserId.objectId,
            }),
            a.save(null, { useMasterKey: !0 });
        } catch (e) {
          console.log('err save in contracts_Webhook', e);
        }
      }));
}
async function PDF(i, o) {
  try {
    i.params.sign;
    var e = i.params.docId,
      a = i.params.userId,
      n = await axios.get(
        serverUrl + '/classes/contracts_Document/' + e + '?include=ExtUserPtr,Signers',
        {
          headers: {
            'Content-Type': 'application/json',
            'X-Parse-Application-Id': APPID,
            'X-Parse-Master-Key': masterKEY,
          },
        }
      ),
      t = await axios.get(serverUrl + '/users/me', {
        headers: {
          'X-Parse-Application-Id': APPID,
          'X-Parse-Session-Token': i.headers.sessiontoken,
        },
      });
    if (!t.data || !t.data.objectId) return { status: 'error', message: 'this user not allowed!' };
    {
      var d,
        l,
        c,
        p = JSON.stringify({ objectId: a });
      let s, r;
      r = a
        ? (d = await axios.get(serverUrl + '/classes/contracts_Contactbook?where=' + p, {
            headers: {
              'X-Parse-Application-Id': APPID,
              'X-Parse-Session-Token': i.headers.sessiontoken,
            },
          })).data && 0 < d.data.results.length
          ? ((s = d), 'contracts_Contactbook')
          : ((s = await axios.get(serverUrl + '/classes/contracts_Users?where=' + p, {
              headers: { 'X-Parse-Application-Id': APPID, 'X-Parse-Master-Key': masterKEY },
            })),
            'contracts_Users')
        : ((l = JSON.stringify({
            UserId: { __type: 'Pointer', className: '_User', objectId: t.data.objectId },
          })),
          (c = await axios.get(serverUrl + '/classes/contracts_Users?where=' + l, {
            headers: { 'X-Parse-Application-Id': APPID, 'X-Parse-Master-Key': masterKEY },
          })).data && 0 < c.data.results.length
            ? ((s = c), 'contracts_Users')
            : ((s = await axios.get(serverUrl + '/classes/contracts_Contactbook?where=' + l, {
                headers: {
                  'X-Parse-Application-Id': APPID,
                  'X-Parse-Session-Token': i.headers.sessiontoken,
                },
              })),
              'contracts_Contactbook'));
      var m = s.data.results[0].Name,
        g = s.data.results[0].Email;
      if (!i.params.pdfFile) return { status: 'error', message: 'pdf file not present!' };
      {
        let e = Buffer.from(i.params.pdfFile, 'base64');
        var h = process.env.PFX_BASE64,
          u = Buffer.from(h, 'base64'),
          f = {
            UserPtr: { __type: 'Pointer', className: r, objectId: s.data.results[0].objectId },
            SignedUrl: '',
            Activity: 'Signed',
            ipAddress: i.headers['x-real-ip'],
          };
        let a;
        var y = (a =
          n.data.AuditTrail && 0 < n.data.AuditTrail.length
            ? [...n.data.AuditTrail, f]
            : [f]).filter(e => 'Signed' === e.Activity);
        let t = !1;
        !(
          (n.data.Signers && 0 < n.data.Signers.length && y.length !== n.data.Signers.length) ||
          !(t = !0)
        );
        var P,
          v,
          x = `exported_file_${Math.floor(5e3 * Math.random())}.pdf`,
          b = './exports/' + x,
          U =
            (t
              ? ((P = n.data.Signers?.map(e => e.Name + ' <' + e.Email + '>')),
                (e =
                  P && 0 < P.length
                    ? plainAddPlaceholder({
                        pdfBuffer: e,
                        reason: 'Digitally signed by Open sign for ' + P?.join(', '),
                        location: 'location',
                        signatureLength: 1e4,
                      })
                    : plainAddPlaceholder({
                        pdfBuffer: e,
                        reason: 'Digitally signed by Open sign for ' + m + ' <' + g + '>',
                        location: 'location',
                        signatureLength: 1e4,
                      })),
                (v = await new SignPDF(e, u).signPDF()),
                fs.writeFileSync(b, v))
              : fs.writeFileSync(b, e),
            await uploadFile(x, b));
        if (U && U.imageUrl) {
          const o = await updateDoc(
            i.params.docId,
            U.imageUrl,
            s.data.results[0].objectId,
            i.headers['x-real-ip'],
            n.data,
            r
          );
          return (
            sendMail({
              url: U.imageUrl,
              sender: { Mail: n.data.ExtUserPtr.Email, Name: n.data.ExtUserPtr.Name },
              pdfName: n.data.Name,
              receiver: g,
            }),
            o &&
              o.isCompleted &&
              (sendCompletedMail({
                url: U.imageUrl,
                sender: { Mail: n.data.ExtUserPtr.Email, Name: 'Open sign' },
                pdfName: n.data.Name,
                receiver: n.data.ExtUserPtr.Email,
              }),
              sendDoctoWebhook(n, U.imageUrl)),
            fs.unlinkSync(b),
            console.log('New Signed PDF created called: ' + b),
            'success' === o.message
              ? { status: 'success', data: U.imageUrl }
              : { status: 'error', message: 'please provide required parameters!' }
          );
        }
      }
    }
  } catch (e) {
    return (
      console.log('Err ', e),
      'ERR_BAD_REQUEST' === e.code
        ? { status: 'error', message: 'Invalid session token!' }
        : { status: 'error', message: 'Encrypted files are currently not supported!' }
    );
  }
}
export default PDF;
